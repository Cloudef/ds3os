/*
 * Dark Souls 3 - Open Server
 * Copyright (C) 2021 Tim Leonard
 *
 * This program is free software; licensed under the MIT license. 
 * You should have received a copy of the license along with this program. 
 * If not, see <https://opensource.org/licenses/MIT>.
 */

// Credit: Parts of this are based on research by: AmirBohd, Radai

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package DS2_Frpg2RequestMessage;

import "DS2_Frpg2PlayerData.proto";

// All push messages have field 1 set to a unique id to distinguish what type they are.
// Not sure why they do it in this manner when they already have a perfectly good
// message-id system build into their transport layer. But whatever.
//
// The message-id thats recieved on the reliable udp message layer is always 0x0320, and the first
// field is read to disambiguate the actual message.
enum PushMessageId {
	PushID_PushRequestRemoveSign               = 829;
	PushID_PushRequestSummonSign               = 830;
	PushID_PushRequestRejectSign               = 831;
	PushID_PushRequestJoinQuickMatch           = 832;
	PushID_PushRequestAcceptQuickMatch         = 833;
	PushID_PushRequestRejectQuickMatch         = 834;
	PushID_PlayerInfoUploadConfigPushMessage   = 908;
	PushID_PushRequestEvaluateBloodMessage     = 918;
	PushID_PushRequestBreakInTarget            = 933;
	PushID_PushRequestRejectBreakInTarget      = 934;
	PushID_PushRequestAllowBreakInTarget       = 935;
	PushID_PushRequestVisit                    = 951;
	PushID_PushRequestRejectVisit              = 952;
	PushID_PushRequestRemoveVisitor            = 953;
	PushID_PushRequestNotifyRingBell           = 969;
	PushID_RegulationFileUpdatePushMessage     = 907;
	PushID_ManagementTextMessage               = 905;
}

// Special empty response, some requests expect an empty response but
// no obvious response class existing in RTTI info, so we just use 
// this as a placeholder.
message EmptyResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Initialization
// ------------------------------------------------------------------------------------------------------------

message RequestWaitForUserLogin {
	required string steam_id = 1;
	required uint32 unknown_1 = 2;	//1
	required uint32 unknown_2 = 3;	//0
	required uint32 unknown_3 = 4;	//1
	required uint32 unknown_4 = 5;	//2
	optional uint32 unknown_5 = 6;
	optional uint32 unknown_6 = 7;
}

message RequestWaitForUserLoginResponse {
	required string steam_id = 1;
	required uint32 player_id = 2;
}

message PlayerStatusUploadConfig {
	repeated uint32 player_data_mask = 1;
	required uint32 upload_interval = 2;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Announcements
// ------------------------------------------------------------------------------------------------------------

message AnnounceMessageData {
	required uint32 unknown_1 = 1;
	required uint32 unknown_2 = 2;
	required uint32 unknown_3 = 3;
	required string header = 4;
	required string message = 5;
	required DS2_Frpg2PlayerData.DateTime datetime = 6;
}

message AnnounceMessageDataList {
	repeated AnnounceMessageData items = 1;
}

message RequestGetAnnounceMessageList {
	required uint32 max_entries = 1;
	optional uint32 unknown_1 = 2;
	optional uint32 unknown_2 = 3;
}

message RequestGetAnnounceMessageListResponse {
	required AnnounceMessageDataList unknown_1 = 1;
	required AnnounceMessageDataList unknown_2 = 2;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Character Info Management
// ------------------------------------------------------------------------------------------------------------

message PlayerCharacterData {
}

message PlayerCharacterID {
}

message PlayerInfoUploadConfigPushMessage {
	required PushMessageId push_message_id = 1;
	required PlayerStatusUploadConfig config = 2;
	required uint32 player_character_status_update_send_delay = 3;
	required uint32 player_status_send_delay = 4;
}

message RequestUpdateLoginPlayerCharacter {
	required uint32 character_id = 1;
	repeated uint32 unknown = 2;
}

message RequestUpdateLoginPlayerCharacterResponse {
	required uint32 character_id = 1;
}

message RequestUpdatePlayerStatus {
	required DS2_Frpg2PlayerData.AllStatus status = 1;
}

message RequestUpdatePlayerStatusResponse {
}

message RequestUpdatePlayerCharacter {
	required uint32 character_id = 1;
	required bytes character_data = 2;
}

message RequestUpdatePlayerCharacterResponse {
}

message RequestGetPlayerCharacter {
	required uint32 player_id = 1;
	required uint32 charatcer_id = 2;
}

message RequestGetPlayerCharacterList {
	required uint32 player_id = 1;
	required uint32 charatcer_id = 2;
	required bytes character_data = 3;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Messages
// ------------------------------------------------------------------------------------------------------------

message BloodMessageData {
	required uint32 player_id = 1;
	required uint32 character_id = 2;
	required uint32 message_id = 3;
	required uint32 evaluations = 4;
	required bytes message_data = 5;
	required string steam_id = 6;
	required uint32 online_area_id = 7;
	optional string unknown_8 = 8;
}

message BloodMessageCellLimitData {
	required uint32 cell_id = 1; //Guessing from the look of the value, could be wrong
	required uint32 max_type_1 = 2; //3
	required uint32 max_type_2 = 3; //2
}

message RequestReentryBloodMessage {
}

message RequestReentryBloodMessageResponse {
}

message RequestCreateBloodMessage {
	required uint32 map_id = 1;
	required uint32 player_id = 2;
	required uint32 character_id = 3;
	required bytes message_data = 4;
}

message RequestCreateBloodMessageResponse {
	required uint32 message_id = 1;
}

message RequestRemoveBloodMessage {
	required uint32 area_id = 1;
	required uint32 player_id = 2;
	required uint32 message_id = 3;
}

message RequestRemoveBloodMessageResponse {
}

message RequestGetBloodMessageList {
	required uint32 map_id = 1;
	required uint32 count = 2;
	repeated BloodMessageCellLimitData search_areas = 3;
}

message RequestGetBloodMessageListResponse {
	required uint32 map_id = 1;
	repeated BloodMessageData messages = 2;
}

message RequestEvaluateBloodMessage {
}

message RequestEvaluateBloodMessageResponse {
}

message RequestGetBloodMessageEvaluation {
}

message RequestGetBloodMessageEvaluationResponse {
}

message PushRequestEvaluateBloodMessage {
	required uint32 map_id = 1;
	required uint32 player_id = 2;
	required uint32 message_id = 3;
}

message RequestGetAreaBloodMessageList {
	required uint32 map_id = 1;
	required uint32 count = 2;
	required uint32 unknown_3 = 3;
	required uint32 unknown_4 = 4;
}

message RequestGetAreaBloodstainList {
	required uint32 max_count = 1;
	required uint32 unknown_2 = 2;
	required uint32 unknown_3 = 3;
	required uint32 unknown_4 = 4;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Stains
// ------------------------------------------------------------------------------------------------------------

message BloodstainInfo {
	required uint32 map_id = 1;
	required uint32 unknown_2 = 2; //Maybe player_id
	required uint32 bloodstain_id = 3;
	required bytes bloodstain_data = 4;
}

message RequestCreateBloodstain {
}

message RequestGetBloodstainList {
	required uint32 map_id = 1;
	required uint32 max_count = 2;
	repeated CellLimitData cell_limit_data = 3;
}

message RequestGetBloodstainListResponse {
	repeated BloodstainInfo bloodstains = 1;
}

message RequestGetDeadingGhost {
	required uint32 map_id = 1;
	required uint32 unknown_2 = 2;
	required uint32 bloodstain_id = 3;
}

message RequestGetDeadingGhostResponse {
	required uint32 map_id = 1;
	required uint32 unknown_2 = 2;
	required uint32 bloodstain_id = 3;
	required bytes ghost_data = 4;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Logging
// ------------------------------------------------------------------------------------------------------------

message RequestNotifyBuyItem {
	required uint32 merchant_chr_id = 1;
	required uint32 item_id = 2;
	required uint32 souls_spent = 3;
	required uint32 quantity = 4;
}

message RequestNotifyBuyItemResponse {
}

message RequestNotifyDeath {
}

message RequestNotifyDeathResponse {
}

message RequestNotifyDisconnectSession {
}

message RequestNotifyDisconnectSessionResponse {
}

message RequestNotifyJoinGuestPlayer {
}

message RequestNotifyJoinGuestPlayerResponse {
}

message RequestNotifyJoinSession {
}

message RequestNotifyJoinSessionResponse {
}

message RequestNotifyKillEnemy {
}

message RequestNotifyKillEnemy_Enemy_count {
}

message RequestNotifyKillEnemyResponse {
}

message RequestNotifyKillPlayer {
}

message RequestNotifyKillPlayerResponse {
}

message RequestNotifyLeaveGuestPlayer {
}

message RequestNotifyLeaveGuestPlayerResponse {
}

message RequestNotifyLeaveSession {
}

message RequestNotifyLeaveSessionResponse {
}

message RequestNotifyMirrorKnight {
}

message RequestNotifyMirrorKnightResponse {
}

message RequestNotifyOfflineDeathCount {
}

message RequestNotifyOfflineDeathCountResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Summon Signs
// ------------------------------------------------------------------------------------------------------------

message MatchingParameter {
	required uint32 unknown_1 = 1;
	required uint32 soul_level = 2;
	required uint32 clear_count = 3;
	required uint32 unknown_4 = 4;
	//Field 5 is skipped by the parsing code
	required uint32 covenant = 6;
	required uint32 unknown_7 = 7;
	required uint32 unknown_8 = 8;
	required uint32 disable_cross_region_play = 9;
	required uint32 unknown_10 = 10;
	required uint32 unknown_11 = 11;
	required uint32 soul_memory = 12;
}

message PushRequestSummonSign {
}

message RequestSummonSign {
}

message RequestSummonSignResponse {
}

message PushRequestRejectSign {
}

message PushRequestRemoveSign {
}

message RequestCreateSign {
	required uint32 map_id = 1;
	required MatchingParameter matching_parameter = 2;
	required bytes player_struct = 3;
	required uint32 player_id = 4;
	required uint32 sign_type = 5;
}

message RequestCreateSignResponse {
	required uint32 sign_id = 1;
}
message RequestGetSignList {
	required uint32 map_id = 1;
	repeated SignCellInfo search_areas = 2;
	required uint32 max_sign_count = 3;
	required MatchingParameter matching_parameter = 4;
	required uint32 unknown_5 = 5; //1
	required uint32 unknown_6 = 6; //1
	required uint32 unknown_7 = 7; //0
}

message RequestGetSignListResponse {
}

message RequestRejectSign {
}

message RequestRejectSignResponse {
}

message RequestRemoveSign {
	required uint32 map_id = 1;
	required uint32 sign_id = 2;
	required uint32 player_id = 3;
}

message RequestRemoveSignResponse {
}

message RequestUpdateSign {
}

message RequestUpdateSignResponse {
}

message SignCellInfo {
	required uint32 online_area_id = 1;
	optional SignInfo local_signs = 2;
	optional uint32 max_count = 3;
}

message SignData {
}

message SignInfo {
	required uint32 player_id = 1;
	required uint32 sign_id = 2;
}

message RequestGetRightMatchingArea {
	required MatchingParameter matching_parameter = 1;
}

message RequestGetRightMatchingAreaResponse {
	repeated group Area_info = 1
	{
		required uint32 map_id = 1;
		required uint32 population = 2;
	}
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Mirror knight summoning
// ------------------------------------------------------------------------------------------------------------

message PushRequestRejectMirrorKnightSign {
}

message PushRequestRemoveMirrorKnightSign {
}

message PushRequestSummonMirrorKnightSign {
}

message RequestCreateMirrorKnightSign {
}

message RequestCreateMirrorKnightSignResponse {
}

message RequestGetMirrorKnightSignList {
}

message RequestGetMirrorKnightSignListResponse {
}

message RequestRejectMirrorKnightSign {
}

message RequestRejectMirrorKnightSignResponse {
}

message RequestRemoveMirrorKnightSign {
}

message RequestRemoveMirrorKnightSignResponse {
}

message RequestSummonMirrorKnightSign {
}

message RequestSummonMirrorKnightSignResponse {
}

message RequestUpdateMirrorKnightSign {
}

message RequestUpdateMirrorKnightSignResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Break In Messages
// ------------------------------------------------------------------------------------------------------------

message BreakInTargetData {
	required uint32 player_id = 1;
	required string steam_id = 2;
}

message PushRequestAllowBreakInTarget {
	required PushMessageId push_message_id = 1;
	required uint32 player_id = 2;
	required bytes player_struct = 3;
	required uint32 unknown_4 = 4;
}

message PushRequestBreakInTarget {
	required PushMessageId push_message_id = 1;
	required uint32 player_id = 2;
	required string steam_id = 3;
	required uint32 unknown_4 = 4;
	required uint32 map_id = 5;
	required uint32 online_area_id = 6;
}

message PushRequestRejectBreakInTarget {
}

message PushRequestRemoveBreakInTarget {
}

message RequestBreakInTarget {
	required uint32 map_id = 1;
	required uint32 online_area_id = 2;
	required uint32 player_id = 3;
	required uint32 unknown_4 = 4;
}

message RequestBreakInTargetResponse {
}

message RequestGetBreakInTargetList {
	required uint32 map_id = 1;
	required uint32 online_area_id = 2;
	required MatchingParameter matching_parameter = 3;
	required uint32 unknown_5 = 5;
}

message RequestGetBreakInTargetListResponse {
	optional uint32	map_id = 1;
	optional uint32 online_area_id = 2;
	repeated BreakInTargetData target_data = 3;
}

message RequestRejectBreakInTarget {
}

message RequestRejectBreakInTargetResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ghost Data
// ------------------------------------------------------------------------------------------------------------

message RequestGetGhostDataList {
	required uint32 map_id = 1;
	required uint32 max_count = 2;
	repeated CellLimitData cell_limit_data = 3;
}

message RequestGetGhostDataListResponse {
	required uint32 map_id = 1;
	repeated GhostData ghosts = 3;
}

message GhostData {
	required uint32 cell_id = 1;
	required uint32 ghost_id = 2;
	required bytes ghost_data = 3;
}

message RequestCreateGhostData {
	required uint32 map_id = 1;
	required uint32 player_id = 2;
	required bytes ghost_data = 3;
}

message RequestCreateGhostDataResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Vistors (Join via covenenant I think)
// ------------------------------------------------------------------------------------------------------------

message VisitorData {
}

message RequestGetVisitorList {
}

message RequestGetVisitorListResponse {
}

message PushRequestRemoveVisitor {
}

message RequestVisit {
}

message RequestVisitResponse {
}

message RequestRejectVisit {
}

message RequestRejectVisitResponse {
}

message PushRequestRejectVisit {
}

message PushRequestVisit {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Bells, this is for archdragon peak I believe.
// ------------------------------------------------------------------------------------------------------------

message PushRequestNotifyRingBell {
}

message RequestNotifyRingBell {
}

message RequestNotifyRingBellResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Regulation Files
// ------------------------------------------------------------------------------------------------------------

message RequestGetRegulationFile {
}

message RequestGetRegulationFileResponse {
}

message RegulationFileDiffData {
}

message RegulationFileMessage {
}

message RegulationFileUpdateMessage {
}

message RegulationFileUpdatePushMessage {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ranking (I'm assuming this is for covenants)
// ------------------------------------------------------------------------------------------------------------

message RankingRecordCount {
}

message RankingRotationID {
}

message PowerStoneRankingData {
	required uint32 player_id = 1;
	required uint32 character_id = 2;
	required uint32 serial_rank = 3;
	required uint32 rank = 4;
	required uint32 score = 5;
	required bytes data = 6;
}

message PowerStoneRankingDataPack {
}

message RequestGetPowerStoneMyRanking {
	required uint32 character_id = 1;
}

message RequestGetPowerStoneMyRankingResponse {
	required PowerStoneRankingData ranking_data = 1;
}

message RequestGetPowerStoneRanking {
	required uint32 unknown_1 = 1;
	required uint32 count = 2;
}

message RequestGetPowerStoneRankingRecordCount {
}

message RequestGetPowerStoneRankingRecordCountResponse {
	required uint32 record = 1;
}

message RequestGetPowerStoneRankingResponse {
	repeated PowerStoneRankingData ranking_data = 1;
}

message RequestRegisterPowerStoneData {
}

message RequestRegisterPowerStoneDataResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Quick Matches (Undead Matches)
// ------------------------------------------------------------------------------------------------------------

message PushRequestAllowQuickMatch {
}

message PushRequestJoinQuickMatch {
}

message PushRequestRejectQuickMatch {
}

message PushRequestRemoveQuickMatch {
}

message QuickMatchData {
}

message RequestJoinQuickMatch {
}

message RequestJoinQuickMatchResponse {
}

message RequestRegisterQuickMatch {
}

message RequestRegisterQuickMatchResponse {
}

message RequestRejectQuickMatch {
}

message RequestRejectQuickMatchResponse {
}

message RequestSearchQuickMatch {
}

message RequestSearchQuickMatchResponse {
}

message RequestUnregisterQuickMatch {
}

message RequestUnregisterQuickMatchResponse {
}

message RequestUpdateQuickMatch {
}

message RequestUpdateQuickMatchResponse {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Death counter
// ------------------------------------------------------------------------------------------------------------

message RequestGetTotalDeathCount {
}

message RequestGetTotalDeathCountResponse {
	required uint32 total_death_count = 1;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Misc
// ------------------------------------------------------------------------------------------------------------

message PushRequestHeader {
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Management artifacts / Useless junk
// ------------------------------------------------------------------------------------------------------------

message ManagementTextMessage {
	required PushMessageId push_message_id = 1;
	required string message = 2;
	required DS2_Frpg2PlayerData.DateTime timestamp = 3;
	required uint32 unknown_4 = 4;
	required uint32 unknown_5 = 5;
}

message NRLoggingMessage {
}

message NRLogUploadRequest {
}

message ServerPing {
}

message RequestBenchmarkThroughput {
}

message RequestBenchmarkThroughputResponse {
}

message RequestGetLoginPlayerCharacter {
}

message RequestGetLoginPlayerCharacterResponse {
}

message RequestGetPlayerCharacterListResponse {
}

message RequestGetPlayerCharacterResponse {
}

message RequestMeasureDownloadBandwidth {
}

message RequestMeasureDownloadBandwidthResponse {
}

message RequestMeasureUploadBandwidth {
}

message RequestMeasureUploadBandwidthResponse {
}

message RequestSendMessageToAllPlayers {
}

message RequestSendMessageToAllPlayersResponse {
}

message RequestSendMessageToPlayers {
}

message RequestSendMessageToPlayersResponse {
}

message RequestSendMessageToSelectLanguagePlayers {
}

message RequestSendMessageToSelectLanguagePlayersResponse {
}

message RequestSendMessageToPushClient {
}

message RequestSendPlayerList {
}

message NotifyLoginToPushServer {
}

message NotifyLogoutToPushServer {
}

message UserLoginInfo {
}

message UserLogout {
}

message LoginClientInfo {
}

message LoginForXboxOne {
}

message SocketOptionSetting {
}

message GetConnectGameServerPortIdResponse {
}

message NotifyClientServerInfoToPushServer {
}

message PushLoginUserInfo {
}

message RequestCheckLogin {
}

message RequestCheckLoginResponse {
}

message RequestGetPlayerConnectGameServer {
}

message RequestGetPlayerConnectGameServerResponse {
}

message PlayerConnectServerInfo {
}

message RequestGetConnectionCount {
}

message RequestGetConnectionCountResponse {
}

message RequestDisconnectAllUser {
}

message RequestDisconnectUser {
}

message RequestGetServerSidePlayerStatus {
}

message CellLimitData {
	required uint32 cell_id = 1;
	required uint32 max_count = 2;
}

message DateTime {
}

